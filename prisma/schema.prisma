generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/types/zood"
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  image             String? // URL de la imagen
  cloudinaryImageId String? // ID de Cloudinary para gesti√≥n
  password          String?
  provider          String?
  providerId        String?
  isActive          Boolean    @default(false)
  role              Role       @default(USER)
  createdAt         DateTime   @default(now())
  accounts          Account[]
  sessions          Session[]
  votes             Vote[]
  info              Info?
  blogLikes         BlogLike[]
  authors           Author[]
  Image             Image[]
}

enum Role {
  USER
  LECTOR
  COLABORADOR
  ADMINISTRADOR
  ROOT
}

model Info {
  id         String    @id @default(cuid())
  userId     String    @unique
  firstName  String?
  lastName   String?
  bio        String?
  birthDate  DateTime?
  website    String?
  phone      String?
  address    String?
  city       String?
  country    String?
  postalCode String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  accessToken  String?
  refreshToken String?
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Vote {
  id           String     @id @default(uuid())
  hashedIp     String
  anonymousId  String?
  createdAt    DateTime   @default(now())
  pollId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  userId       String?
  user         User?      @relation(fields: [userId], references: [id])

  @@index([hashedIp, pollId])
  @@index([anonymousId, pollId])
}

model Category {
  id   String @id @default(uuid())
  name String
  slug String @unique

  polls Poll[]
  Image Image[]
}

model NewsItem {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())

  poll   Poll?   @relation("NewsItemPoll")
  pollId String? @unique

  blog   Blog?   @relation("NewsItemBlog")
  blogId String? @unique
  Image  Image[]
}

model Poll {
  id          String    @id @default(uuid())
  question    String
  slug        String    @unique
  description String?
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  Archived    Boolean   @default(false)
  isPublic    Boolean   @default(true)
  ArchivedAt  DateTime?
  Deleted     Boolean   @default(false)
  DeletedAt   DateTime?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  options PollOption[]
  Vote    Vote[]

  newsItem   NewsItem? @relation("NewsItemPoll", fields: [newsItemId], references: [id], onDelete: Cascade)
  newsItemId String?   @unique
  Image      Image[]
}

model Blog {
  id          String       @id @default(cuid())
  title       String
  content     String
  slug        String       @unique
  imagenSeo   String?
  category    String?
  dateNews    DateTime
  likes       BlogLike[]
  blogAuthors BlogAuthor[]
  img_card    String?
  newsItem    NewsItem     @relation("NewsItemBlog", fields: [newsItemId], references: [id], onDelete: Cascade)
  newsItemId  String       @unique
  Image       Image[]
}

model PollOption {
  id   String @id @default(uuid())
  text String

  pollId String
  poll   Poll   @relation(fields: [pollId], references: [id])

  votes Vote[]
}

model Author {
  id          String       @id @default(cuid())
  name        String       @unique
  link        String?
  description String?
  twitter     String?
  instagram   String?
  facebook    String?
  linkedin    String?
  blogAuthors BlogAuthor[]
  userId      String?      @unique
  user        User?        @relation(fields: [userId], references: [id])
}

model BlogLike {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model BlogAuthor {
  id       String @id @default(cuid())
  blogId   String
  authorId String

  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([blogId, authorId])
}

model Image {
  id         String    @id @default(cuid())
  url        String
  publicId   String
  alt        String?
  createdAt  DateTime  @default(now())
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  newsItem   NewsItem? @relation(fields: [newsItemId], references: [id])
  newsItemId String?
  blog       Blog?     @relation(fields: [blogId], references: [id])
  blogId     String?
  poll       Poll?     @relation(fields: [pollId], references: [id])
  pollId     String?
}
