generator zod {
  provider = "zod-prisma-types"
  output   = "../src/types/zood"
}

generator client {
  provider = "prisma-client-js"
  // Eliminar previewFeatures = ["connectionLimit"] - no es válida
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Eliminar relationMode = "prisma" - no es necesario para PostgreSQL
}

// Modelo actualizado para manejar traducciones como registros relacionados
model Translation {
  id               String   @id @default(cuid())
  originalEntityId String // ID de la entidad original
  entityType       String // 'blog', 'category', 'tag', 'poll', etc.
  translatedIds    String[] // Array con IDs de todas las traducciones
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([originalEntityId, entityType])
  @@index([originalEntityId])
  @@index([entityType])
}

// Blog actualizado - cada traducción es un registro separado
model Blog {
  id             String  @id @default(cuid())
  title          String
  content        String
  titlePunch     String?
  slug           String  @unique
  seoDescription String?
  baseLanguage   String  @default("es")
  isTranslation  Boolean @default(false) // ✅ NUEVO: Indica si es traducción
  originalBlogId String? // ✅ NUEVO: ID del blog original
  originalBlog   Blog?   @relation("BlogTranslations", fields: [originalBlogId], references: [id])
  translations   Blog[]  @relation("BlogTranslations")

  // ... resto de campos existentes
  imagenSeoId  String?
  imagenSeo    Image?    @relation("BlogImagenSeo", fields: [imagenSeoId], references: [id])
  dateNews     DateTime
  imagenCardId String?
  imagenCard   Image?    @relation("BlogImagenCard", fields: [imagenCardId], references: [id])
  newsItem     NewsItem? @relation("NewsItemBlog", fields: [newsItemId], references: [id], onDelete: Cascade)
  newsItemId   String?   @unique
  Image        Image[]
  readTime     Int?
  views        Int       @default(0)
  dateCreated  DateTime  @default(now())

  // Relaciones (solo para el blog original)
  blogAuthors      BlogAuthor[]
  likes            BlogLike[]
  tags             BlogTag[]
  categoryId       String?
  Category         Category?          @relation(fields: [categoryId], references: [id])
  TranslationQueue TranslationQueue[]

  @@index([originalBlogId])
  @@index([baseLanguage])
  @@index([isTranslation])
}

// Actualizar otros modelos de manera similar
model Category {
  id                 String     @id @default(uuid())
  name               String
  slug               String     @unique
  baseLanguage       String     @default("es")
  isTranslation      Boolean    @default(false) // ✅ NUEVO
  originalCategoryId String? // ✅ NUEVO
  originalCategory   Category?  @relation("CategoryTranslations", fields: [originalCategoryId], references: [id])
  translations       Category[] @relation("CategoryTranslations")

  polls Poll[]
  Image Image[]
  Blog  Blog[]

  @@index([originalCategoryId])
  @@index([baseLanguage])
}

model Tag {
  id            String  @id @default(cuid())
  name          String  @unique
  slug          String  @unique
  description   String?
  baseLanguage  String  @default("es")
  isTranslation Boolean @default(false) // ✅ NUEVO
  originalTagId String? // ✅ NUEVO
  originalTag   Tag?    @relation("TagTranslations", fields: [originalTagId], references: [id])
  translations  Tag[]   @relation("TagTranslations")

  blogs BlogTag[]

  @@index([originalTagId])
  @@index([baseLanguage])
}

model Poll {
  id             String  @id @default(uuid())
  question       String
  slug           String  @unique
  description    String?
  baseLanguage   String  @default("es")
  isTranslation  Boolean @default(false) // ✅ NUEVO
  originalPollId String? // ✅ NUEVO
  originalPoll   Poll?   @relation("PollTranslations", fields: [originalPollId], references: [id])
  translations   Poll[]  @relation("PollTranslations")

  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime  @default(now())
  Archived   Boolean   @default(false)
  isPublic   Boolean   @default(true)
  ArchivedAt DateTime?
  Deleted    Boolean   @default(false)
  DeletedAt  DateTime?

  categoryId String
  category   Category     @relation(fields: [categoryId], references: [id])
  options    PollOption[]
  Vote       Vote[]
  newsItem   NewsItem?    @relation("NewsItemPoll", fields: [newsItemId], references: [id], onDelete: Cascade)
  newsItemId String?      @unique
  Image      Image[]

  @@index([originalPollId])
  @@index([baseLanguage])
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String? // URL de la imagen
  cloudinaryImageId String? // ID de Cloudinary para gestión
  password          String?
  provider          String?
  providerId        String?
  isActive          Boolean          @default(false)
  role              Role             @default(USER)
  createdAt         DateTime         @default(now())
  accounts          Account[]
  sessions          Session[]
  votes             Vote[]
  info              Info?
  blogLikes         BlogLike[]
  authors           Author[]
  Image             Image[]
  description       String?
  interests         String[] // Array de strings para PostgreSQL
  socialMedia       SocialMedia[]
  readingHistory    ReadingHistory[]
}

model ReadingHistory {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  readAt    DateTime @default(now())
  readTime  Int // en minutos
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, articleId])
}

enum Role {
  USER
  LECTOR
  COLABORADOR
  ADMINISTRADOR
  ROOT
}

model Info {
  id         String    @id @default(cuid())
  userId     String    @unique
  firstName  String?
  lastName   String?
  bio        String?
  birthDate  DateTime?
  website    String?
  phone      String?
  address    String?
  city       String?
  country    String?
  postalCode String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  accessToken  String?
  refreshToken String?
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Vote {
  id           String     @id @default(uuid())
  hashedIp     String
  anonymousId  String?
  createdAt    DateTime   @default(now())
  pollId       String
  poll         Poll       @relation(fields: [pollId], references: [id])
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id])
  userId       String?
  user         User?      @relation(fields: [userId], references: [id])

  @@index([hashedIp, pollId])
  @@index([anonymousId, pollId])
}

model NewsItem {
  id           String   @id @default(cuid())
  title        String // Idioma base
  content      String // Idioma base
  baseLanguage String   @default("es")
  createdAt    DateTime @default(now())

  poll   Poll?   @relation("NewsItemPoll")
  pollId String? @unique
  blog   Blog?   @relation("NewsItemBlog")
  blogId String? @unique
  Image  Image[]
}

model BlogTag {
  id     String @id @default(cuid())
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String

  @@unique([blogId, tagId])
}

model BlogLike {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model BlogAuthor {
  id       String @id @default(cuid())
  blogId   String
  authorId String

  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([blogId, authorId])
}

// Agregar al final del schema.prisma
model TranslationQueue {
  id             String    @id @default(cuid())
  blogId         String
  targetLanguage String
  status         String    @default("pending") // pending, processing, completed, failed
  retryCount     Int       @default(0)
  errorMessage   String?
  priority       Int       @default(0) // Mayor número = mayor prioridad
  createdAt      DateTime  @default(now())
  processedAt    DateTime?
  completedAt    DateTime?

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([blogId, targetLanguage])
  @@index([status, priority, createdAt])
  @@map("translation_queue")
}

model PollOption {
  id           String @id @default(uuid())
  text         String // Idioma base
  baseLanguage String @default("es")
  pollId       String
  poll         Poll   @relation(fields: [pollId], references: [id])
  votes        Vote[]
}

model Author {
  id             String        @id @default(cuid())
  name           String        @unique
  link           String?
  description    String?
  twitter        String?
  instagram      String?
  facebook       String?
  linkedin       String?
  profilePicture String? // URL directa como fallback
  // Nueva relación con Image
  profileImageId String?       @unique
  profileImage   Image?        @relation("AuthorProfileImage", fields: [profileImageId], references: [id])
  blogAuthors    BlogAuthor[]
  userId         String?       @unique
  user           User?         @relation(fields: [userId], references: [id])
  socialMedia    SocialMedia[]
}

model SocialMedia {
  id        String   @id @default(cuid())
  platform  String // Twitter, Instagram, Facebook, LinkedIn, etc.
  url       String // URL completa
  username  String? // @username opcional
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones polimórficas
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  authorId String?
  author   Author? @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@unique([userId, platform]) // Un usuario solo puede tener una cuenta por plataforma
  @@unique([authorId, platform]) // Un autor solo puede tener una cuenta por plataforma
  @@index([platform])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  width     Int?
  height    Int?
  format    String?
  publicId  String   @unique
  folder    String?
  size      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación con User (para imágenes de perfil de usuario)
  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Relación con Category
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  // Relación con NewsItem
  newsItem   NewsItem? @relation(fields: [newsItemId], references: [id])
  newsItemId String?

  // Relación con Poll
  poll   Poll?   @relation(fields: [pollId], references: [id])
  pollId String?

  // Relaciones específicas con Blog (SEO y Card)
  blogImagenSeo  Blog[] @relation("BlogImagenSeo")
  blogImagenCard Blog[] @relation("BlogImagenCard")

  // Relación con Author (imagen de perfil)
  authorProfileImage Author? @relation("AuthorProfileImage")
  Blog               Blog?   @relation(fields: [blogId], references: [id])
  blogId             String?

  @@map("images")
}
